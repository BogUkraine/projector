# name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Change directory
        working-directory: hw23-cicd
        run: pwd

      - name: Install dependencies
        working-directory: hw23-cicd
        run: npm install
      
      - name: Run tests
        working-directory: hw23-cicd
        run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
      
      # - name: Install dependencies
      #   working-directory: hw23-cicd
      #   run: npm install

      - name: Build Lambda package
        working-directory: hw23-cicd
        run: npm run build

      - name: Build Lambda Layer
        working-directory: hw23-cicd
        run: npm run layer:build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: hw23-cicd/index.zip

      - name: Upload Layer
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer
          path: hw23-cicd/layer/layer.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Lambda Package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: .

      - name: Download Lambda Layer
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer
          path: .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

    #   - name: Deploy Lambda Layer
    #     run: |
    #       LAYER_VERSION=$(aws lambda publish-layer-version \
    #         --layer-name "hsa-layer" \
    #         --zip-file "fileb://layer.zip" \
    #         --query 'Version' \
    #         --output text)
    #       echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

    #   - name: Deploy Lambda Function
    #     env:
    #       LAYER_VERSION: ${{ env.LAYER_VERSION }}
    #     run: |
    #       aws lambda update-function-code \
    #         --function-name "hsa-lambda" \
    #         --zip-file "fileb://index.zip"

    #       aws lambda update-function-configuration \
    #         --function-name "hsa-lambda" \
    #         --layers "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:hsa-layer:$LAYER_VERSION"


      - name: Wait and Update Lambda Function Code
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          SLEEP_TIME=10

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Attempt to update the function code
            if aws lambda update-function-code \
              --function-name hsa-lambda \
              --zip-file "fileb://index.zip"; then
              echo "Lambda function code updated successfully."
              break
            else
              echo "Lambda function update is in progress. Retrying in $SLEEP_TIME seconds..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep $SLEEP_TIME
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to update Lambda function code after $MAX_RETRIES retries."
            exit 1
          fi

      - name: Wait and Update Lambda Function Configuration
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          SLEEP_TIME=10

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Attempt to update the function configuration
            if aws lambda update-function-configuration \
              --function-name hsa-lambda \
              --memory-size 128; then
              echo "Lambda function configuration updated successfully."
              break
            else
              echo "Lambda function configuration update is in progress. Retrying in $SLEEP_TIME seconds..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep $SLEEP_TIME
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to update Lambda function configuration after $MAX_RETRIES retries."
            exit 1
          fi